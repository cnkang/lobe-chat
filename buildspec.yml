version: 0.2

env:
  variables:
    NODE_ENV: production
    NEXT_TELEMETRY_DISABLED: "1"
    CI: "1"
    AWS_DEFAULT_REGION: us-east-1
    AWS_ACCOUNT_ID: "${AWS_ACCOUNT_ID}"
    IMAGE_REPO_NAME: "${IMAGE_REPO_NAME:-lobe-chat}"
    IMAGE_TAG: "${IMAGE_TAG:-latest}"

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH}
      - echo Repository URI is $REPOSITORY_URI
      - echo Image tag is $IMAGE_TAG

  install:
    runtime-versions:
      nodejs: 22
    commands:
      - set -euxo pipefail
      - |
        if [ ! -x "$HOME/.bun/bin/bun" ]; then
          echo "Installing Bun..."
          curl -fsSL https://bun.sh/install | bash
        fi
      - export BUN_INSTALL="$HOME/.bun"
      - export PATH="$BUN_INSTALL/bin:$PATH"
      - export THREADS="$(nproc)"
      - export OUTPUT_FILE_TRACING_ROOT=$CODEBUILD_SRC_DIR
      - echo "OUTPUT_FILE_TRACING_ROOT=$OUTPUT_FILE_TRACING_ROOT"
      - export TOTAL_MB="$(awk '/MemTotal/ {printf "%.0f", $2/1024}' /proc/meminfo)"
      - export HEAP_MB="$(( TOTAL_MB * 80 / 100 ))"
      - if [ "$HEAP_MB" -lt 6144 ]; then export HEAP_MB=6144; fi
      - export NODE_OPTIONS="--max-old-space-size=${HEAP_MB} --max-semi-space-size=256"
      - export BUN_JOBS="${THREADS}"
      - export SWC_THREADS="${THREADS}"
      - if [ -f bun.lockb ]; then bun install --frozen-lockfile --no-progress; else bun install --no-progress; fi

  build:
    commands:
      - set -euxo pipefail
      - echo "Loading environment variables from SSM"
      - |
        REGION="us-east-1"
        SSM_PREFIX="/newswarrior/lobechat"
        NEXT_TOKEN=""
        while :; do
          if [ -z "${NEXT_TOKEN:-}" ]; then
            RESP=$(aws ssm get-parameters-by-path --path "${SSM_PREFIX}/" --with-decryption --recursive --region "$REGION" --output json)
          else
            RESP=$(aws ssm get-parameters-by-path --path "${SSM_PREFIX}/" --with-decryption --recursive --region "$REGION" --output json --starting-token "$NEXT_TOKEN")
          fi
          echo "$RESP" | jq -r '.Parameters[] | "export \(.Name|split("/")[-1])=\(.Value)"' >> /tmp/ssm_env.sh
          NEXT_TOKEN=$(echo "$RESP" | jq -r '.NextToken // empty')
          [ -z "$NEXT_TOKEN" ] && break
        done
        source /tmp/ssm_env.sh
      - echo "Running Next.js build (standalone mode)"
      - export OUTPUT_FILE_TRACING_ROOT=$CODEBUILD_SRC_DIR
      - bun run prebuild || true
      - DOCKER=true npx next build
      - bun run build-sitemap || true
      - bun run build-migrate-db || true
      - |
        if [ ! -f ".next/standalone/server.js" ]; then
          echo "❌ ERROR: .next/standalone/server.js not found. Check next.config.js has output: 'standalone'" >&2
          exit 1
        fi
      - echo "Building Docker image..."
      - docker build -f Dockerfile.codebuild -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:latest

  post_build:
    commands:
      - echo "Pushing Docker image to ECR..."
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - echo "Docker image pushed successfully"
      - printf '[{"name":"lobe-chat","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

artifacts:
  files:
    - .next/standalone/**/*
    - .next/static/**/*
    - public/**/*
    - package.json
    - bun.lockb
    - appspec.yml
    - deploy/**/*
    - imagedefinitions.json
  discard-paths: no

cache:
  paths:
    - '~/.bun/**/*'
    - '.next/cache/**/*'
