name: Build and Deploy to ECR

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [ dev-codebuild ]
  pull_request:
    branches: [ dev-codebuild ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: lobe-chat

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-

    - name: Cache Next.js build
      uses: actions/cache@v4
      with:
        path: |
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/bun.lockb') }}-

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: github-actions-lobe-chat
        aws-region: ${{ env.AWS_REGION }}

    - name: Load environment variables from SSM
      run: |
        aws ssm get-parameters-by-path \
          --path "/newswarrior/lobechat/" \
          --recursive \
          --with-decryption \
          --region ${{ env.AWS_REGION }} \
          --query 'Parameters[].[Name,Value]' \
          --output text | \
        while read -r param_name param_value; do
          key_name=$(echo "$param_name" | sed 's|/newswarrior/lobechat/||')
          echo "$key_name=$param_value" >> $GITHUB_ENV
        done

    - name: Build Next.js app
      env:
        NODE_OPTIONS: "--max-old-space-size=8192"
        DOCKER: "true"
      run: |
        bun run prebuild || true
        bun run build
        bun run build-sitemap || true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Prepare Vercel output
      if: github.event_name == 'push'
      run: |
        mkdir -p .vercel/output
        cp -r .next/* .vercel/output/
        echo '{"version":3}' > .vercel/output/config.json

    - name: Deploy to Vercel
      if: github.event_name == 'push'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        vercel-args: '--prod --prebuilt'

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          -f Dockerfile.codebuild \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          --cache-from type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:cache \
          --cache-to type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:cache,mode=max \
          --push .